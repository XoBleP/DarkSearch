from fastapi import FastAPI
import uvicorn
import threading

import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
from aiocryptopay import AioCryptoPay
from telethon import TelegramClient
from telethon.sessions import StringSession
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8094350096:AAF_2dFYmMSxeB_F40dOX1e8XorhwbRAIyk"
CRYPTO_PAY_TOKEN = "365966:AA7XaVNkTXI4wvOoUWIvHRboNJp1Ktk7ab7"
API_ID = 28745328
API_HASH = "99b7d5e0faedd6ddae2ebb8d792a763c"
SESSION_STRING = "1ApWapzMBuzlg5kbC1qweYA5ZT3MSHLcQB5PioEv0svE5RXgmdYRJFOCucCd9Bes_iGkb7pjLsqroPbht67tP6AyluObcfvut7fGBCC__xcs3-2_AEFBC26QcPcCGr2X2NQ9dPIOD_n28NZiSDZq8OA8ICJn58UkFXvoWcW_M-OXRBQLni7cEMI5h90Oon5VcUHgevuI3mD_pOYaNCajgdR1iRejeaRRhmRHlwEqisJ5y7FTEslJYpHgTiX_QQSJspTc1FNb8-XHIwAsmnGko_ZmHFqogMQkEoxILSZUhw4ux7VM1D4loFgGElqk0hNY9Su4xHL4RsLkKZ5VKAj5kFs0KmfSqG9Y="
ADMIN_ID = 7942521984

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
crypto = AioCryptoPay(CRYPTO_PAY_TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
payments_db = {}
promocodes_db = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard(is_admin=False):
    buttons = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω–∫–∞")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def profile_keyboard(has_sub):
    buttons = []
    if not has_sub:
        buttons.append([InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_sub")])
    buttons.append([InlineKeyboardButton(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscription_plans_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å | 1$", callback_data="sub_1"),
            InlineKeyboardButton(text="3 –¥–Ω—è | 2$", callback_data="sub_3")
        ],
        [
            InlineKeyboardButton(text="7 –¥–Ω–µ–π | 5$", callback_data="sub_7"),
            InlineKeyboardButton(text="14 –¥–Ω–µ–π | 7$", callback_data="sub_14")
        ],
        [InlineKeyboardButton(text="30 –¥–Ω–µ–π | 9$", callback_data="sub_30")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def payment_confirmation_keyboard(invoice_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://t.me/CryptoBot?start={invoice_id}"),
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{invoice_id}")
        ]
    ])

def search_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –ü–æ –Ω–æ–º–µ—Ä—É", callback_data="search_phone")],
        [InlineKeyboardButton(text="üë§ –ü–æ —é–∑–µ—Ä–Ω–µ–π–º—É", callback_data="search_username")]
    ])

def admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_give_sub")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_remove_sub")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ])

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    waiting_phone = State()
    waiting_username = State()
    waiting_promo = State()
    admin_give_sub = State()
    admin_remove_sub = State()

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "subscription": None,
            "is_admin": user_id == ADMIN_ID
        }
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!",
        reply_markup=main_keyboard(user_id == ADMIN_ID)
    )

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: types.Message):
    user = users_db.get(message.from_user.id, {})
    
    sub_status = ("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ " + user["subscription"].strftime("%d.%m.%Y %H:%M")) \
        if user.get("subscription") and user["subscription"] > datetime.now() \
        else "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"
    
    text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
        f"üÜî <b>ID:</b> {message.from_user.id}\n"
        f"üë§ <b>–ò–º—è:</b> {user.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìå <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîí <b>–°—Ç–∞—Ç—É—Å:</b> {sub_status}"
    )
    
    await message.answer(
        text,
        reply_markup=profile_keyboard(
            user.get("subscription") and user["subscription"] > datetime.now()
        ),
        parse_mode="HTML"
    )

@dp.message(F.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: types.Message):
    await message.answer("üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>", 
                        reply_markup=subscription_plans_keyboard(),
                        parse_mode="HTML")

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_menu(message: types.Message):
    user_id = message.from_user.id
    user = users_db.get(user_id, {})
    
    if not user.get("subscription") or user["subscription"] < datetime.now():
        await message.answer("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!")
        return
    
    await message.answer("üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:</b>", 
                        reply_markup=search_keyboard(),
                        parse_mode="HTML")

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>", 
                           reply_markup=admin_keyboard(),
                           parse_mode="HTML")
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(F.data.startswith("sub_"))
async def process_subscription(callback: CallbackQuery):
    days = int(callback.data.split("_")[1])
    prices = {1: 1, 3: 2, 7: 5, 14: 7, 30: 9}
    amount = prices.get(days, 1)
    
    await callback.answer()
    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π –∑–∞ {amount}$?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{days}_{amount}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel")
            ]
        ])
    )

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_subscription(callback: CallbackQuery):
    _, days, amount = callback.data.split("_")
    days = int(days)
    amount = float(amount)
    
    try:
        invoice = await crypto.create_invoice(
            asset="USDT",
            amount=amount,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π"
        )
        
        pay_url = f"https://t.me/CryptoBot?start={invoice.invoice_id}"
        invoice_id = invoice.invoice_id
        
        payments_db[invoice_id] = {
            "user_id": callback.from_user.id,
            "days": days,
            "amount": amount,
            "paid": False
        }
        
        await callback.message.answer(
            f"üí≥ <b>–í–∞—à —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {days} –¥–Ω–µ–π:</b>\n\n"
            f"<b>–°—É–º–º–∞:</b> {amount}$\n"
            f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {pay_url}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'</b>",
            reply_markup=payment_confirmation_keyboard(invoice_id),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n"
            f"<i>{str(e)}</i>",
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("check_"))
async def check_payment(callback: CallbackQuery):
    invoice_id = int(callback.data.split("_")[1])
    payment = payments_db.get(invoice_id)
    
    if not payment:
        await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if payment["paid"]:
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
        return
    
    try:
        invoice = await crypto.get_invoices(invoice_ids=invoice_id)
        
        if invoice.status == 'paid':
            payments_db[invoice_id]["paid"] = True
            user_id = payment["user_id"]
            days = payment["days"]
            
            current_sub = users_db[user_id].get("subscription")
            if current_sub and current_sub > datetime.now():
                new_sub = current_sub + timedelta(days=days)
            else:
                new_sub = datetime.now() + timedelta(days=days)
            
            users_db[user_id]["subscription"] = new_sub
            
            await callback.message.answer(
                f"üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {new_sub.strftime('%d.%m.%Y %H:%M')}!</b>",
                reply_markup=main_keyboard(users_db[user_id].get("is_admin", False)),
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)

# –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def perform_search(user_id, query, search_type):
    try:
        async with TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH) as client:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
            if search_type == "username":
                query = query.lstrip('@')
                query = f"t.me/{query}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            await client.send_message("@EnergyGram_robot", query)
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await client.get_messages("@EnergyGram_robot", limit=2)
            
            if len(messages) >= 2:
                return messages[0].text  # –ë–µ—Ä–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif messages:
                return messages[0].text  # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else:
                return "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

@dp.callback_query(F.data == "search_phone")
async def search_phone_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üî¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
        "<i>–§–æ—Ä–º–∞—Ç: +79991234567 –∏–ª–∏ 89991234567</i>",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_phone)
    await callback.answer()

@dp.message(UserStates.waiting_phone)
async def process_phone_search(message: types.Message, state: FSMContext):
    phone = ''.join(filter(str.isdigit, message.text.strip()))
    
    if not phone or len(phone) < 10:
        await message.answer("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>", parse_mode="HTML")
        return
    
    await message.answer(f"üîç <b>–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É:</b> {phone}...", parse_mode="HTML")
    
    try:
        loading_msg = await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫...")
        result = await perform_search(message.from_user.id, phone, "phone")
        await loading_msg.delete()
        await message.answer(result, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
    
    await state.clear()

@dp.callback_query(F.data == "search_username")
async def search_username_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üë§ <b>–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
        "<i>–ú–æ–∂–Ω–æ —Å @ –∏–ª–∏ –±–µ–∑</i>",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.waiting_username)
    await callback.answer()

@dp.message(UserStates.waiting_username)
async def process_username_search(message: types.Message, state: FSMContext):
    username = message.text.strip()
    
    if not username:
        await message.answer("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username!</b>", parse_mode="HTML")
        return
    
    await message.answer(f"üîç <b>–ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É:</b> {username}...", parse_mode="HTML")
    
    try:
        loading_msg = await message.answer("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –ø–æ–∏—Å–∫...")
        result = await perform_search(message.from_user.id, username, "username")
        await loading_msg.delete()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "t.me/" in result:
            result = result.replace("t.me/", "@")
        await message.answer(result, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", parse_mode="HTML")
    
    await state.clear()

# –ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏
@dp.callback_query(F.data == "admin_give_sub")
async def admin_give_sub_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üëë <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:</b>\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1234567 30</i>",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.admin_give_sub)
    await callback.answer()

@dp.message(UserStates.admin_give_sub)
async def process_admin_give_sub(message: types.Message, state: FSMContext):
    try:
        user_id, days = map(int, message.text.split())
        if user_id in users_db:
            current_sub = users_db[user_id].get("subscription")
            
            if current_sub and current_sub > datetime.now():
                new_sub = current_sub + timedelta(days=days)
            else:
                new_sub = datetime.now() + timedelta(days=days)
            
            users_db[user_id]["subscription"] = new_sub
            await message.answer(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π</b>\n"
                f"<i>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_sub.strftime('%d.%m.%Y %H:%M')}</i>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

@dp.callback_query(F.data == "admin_remove_sub")
async def admin_remove_sub_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üëë <b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>",
        parse_mode="HTML"
    )
    await state.set_state(UserStates.admin_remove_sub)
    await callback.answer()

@dp.message(UserStates.admin_remove_sub)
async def process_admin_remove_sub(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        if user_id in users_db:
            users_db[user_id]["subscription"] = None
            await message.answer(
                f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞</b>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()

@dp.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    active_subs = sum(1 for user in users_db.values() if user.get("subscription") and user["subscription"] > datetime.now())
    total_users = len(users_db)
    
    await callback.message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b> {active_subs}",
        parse_mode="HTML"
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup():
    try:
        await bot.send_message(ADMIN_ID, "ü§ñ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

async def on_shutdown():
    await bot.session.close()
    await crypto.close()

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI()

@app.get("/")
def health_check():
    return {"status": "bot_is_alive"}

async def run_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=asyncio.run, args=(run_bot(),), daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render)
    uvicorn.run(app, host="0.0.0.0", port=8000)
